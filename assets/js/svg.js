(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = loadDataSrcSVG;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function replaceAttributes(new_, old) {
	for (var i = 0; i < old.attributes.length; i++) {
		var attr = old.attributes[i];
		new_.setAttribute(attr.name, attr.value);
	}
}

/** embed SVGs via data-src
 * e.g. <svg data-src="images/test.svg"></svg>.
 * Useful for styling and using class="fragment" in SVG code
 */

function loadDataSrcSVG() {
	var svgsToLoad = [].concat(_toConsumableArray(document.querySelectorAll('svg[data-src]')));

	var loadSVGs = svgsToLoad.map(function (svg) {
		return fetch(svg.getAttribute('data-src')).then(function (response) {
			return response.text();
		}).then(function (svgCode) {
			var svgDoc = new DOMParser().parseFromString(svgCode, 'image/svg+xml');
			var newSVG = svgDoc.documentElement;
			replaceAttributes(newSVG, svg);
			svg.parentNode.replaceChild(newSVG, svg);
		})['catch'](function (error) {
			if (!(error instanceof TypeError)) throw error;
			var img = document.createElement('img');
			img.setAttribute('src', svg.getAttribute('data-src'));
			replaceAttributes(img, svg);
			svg.parentNode.replaceChild(img, svg);
		});
	});

	Promise.all(loadSVGs).then(function (val) {
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = document.querySelectorAll('svg.stretch:not([preserveAspectRatio])')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var svg = _step.value;

				if (!svg.hasAttribute('viewBox')) {
					var w = svg.getAttribute('width');
					var h = svg.getAttribute('height');
					svg.setAttribute('viewBox', '0 0 ' + w + ' ' + h);
				}
				svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator['return']) {
					_iterator['return']();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	});
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L1dlYi9TaGFyb24vZnJvbnRlZXJzMjAxN3ByZXNvdC9zb3VyY2UvamF2YXNjcmlwdHMvZmFrZV82NGMxNGFmMi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFXd0IsY0FBYzs7OztBQVh0QyxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7QUFDckMsTUFBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzNDLE1BQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDNUIsTUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtFQUN4QztDQUNEOzs7Ozs7O0FBTWMsU0FBUyxjQUFjLEdBQUc7QUFDeEMsS0FBSSxVQUFVLGdDQUFRLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFBOztBQUVsRSxLQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRztTQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQ3RFLElBQUksQ0FBQyxVQUFBLFFBQVE7VUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFO0dBQUEsQ0FBQyxDQUNqQyxJQUFJLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDaEIsT0FBSSxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0FBQ3RFLE9BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUE7QUFDbkMsb0JBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQzlCLE1BQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtHQUN4QyxDQUFDLFNBQ0ksQ0FBQyxVQUFBLEtBQUssRUFBSTtBQUNmLE9BQUksRUFBRSxLQUFLLFlBQVksU0FBUyxDQUFBLEFBQUMsRUFDaEMsTUFBTSxLQUFLLENBQUE7QUFDWixPQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3ZDLE1BQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUNyRCxvQkFBaUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDM0IsTUFBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0dBQ3JDLENBQUM7RUFBQSxDQUFDLENBQUE7O0FBRUosUUFBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLEVBQUk7Ozs7OztBQUNqQyx3QkFBZ0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLDhIQUFFO1FBQTVFLEdBQUc7O0FBQ1gsUUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDakMsU0FBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNqQyxTQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ2xDLFFBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxXQUFTLENBQUMsU0FBSSxDQUFDLENBQUcsQ0FBQTtLQUM1QztBQUNELE9BQUcsQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsZUFBZSxDQUFDLENBQUE7SUFDeEQ7Ozs7Ozs7Ozs7Ozs7OztFQUNELENBQUMsQ0FBQTtDQUNGIiwiZmlsZSI6IkQ6L1dlYi9TaGFyb24vZnJvbnRlZXJzMjAxN3ByZXNvdC9zb3VyY2UvamF2YXNjcmlwdHMvZmFrZV82NGMxNGFmMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlcGxhY2VBdHRyaWJ1dGVzKG5ld18sIG9sZCkge1xyXG5cdGZvciAobGV0IGk9MDsgaTxvbGQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0bGV0IGF0dHIgPSBvbGQuYXR0cmlidXRlc1tpXVxyXG5cdFx0bmV3Xy5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBhdHRyLnZhbHVlKVxyXG5cdH1cclxufVxyXG5cclxuLyoqIGVtYmVkIFNWR3MgdmlhIGRhdGEtc3JjXHJcbiAqIGUuZy4gPHN2ZyBkYXRhLXNyYz1cImltYWdlcy90ZXN0LnN2Z1wiPjwvc3ZnPi5cclxuICogVXNlZnVsIGZvciBzdHlsaW5nIGFuZCB1c2luZyBjbGFzcz1cImZyYWdtZW50XCIgaW4gU1ZHIGNvZGVcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWREYXRhU3JjU1ZHKCkge1xyXG5cdGxldCBzdmdzVG9Mb2FkID0gWyAuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdmdbZGF0YS1zcmNdJykgXVxyXG5cdFxyXG5cdGxldCBsb2FkU1ZHcyA9IHN2Z3NUb0xvYWQubWFwKHN2ZyA9PiBmZXRjaChzdmcuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpKVxyXG5cdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxyXG5cdFx0LnRoZW4oc3ZnQ29kZSA9PiB7XHJcblx0XHRcdGxldCBzdmdEb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN2Z0NvZGUsICdpbWFnZS9zdmcreG1sJylcclxuXHRcdFx0bGV0IG5ld1NWRyA9IHN2Z0RvYy5kb2N1bWVudEVsZW1lbnRcclxuXHRcdFx0cmVwbGFjZUF0dHJpYnV0ZXMobmV3U1ZHLCBzdmcpXHJcblx0XHRcdHN2Zy5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdTVkcsIHN2ZylcclxuXHRcdH0pXHJcblx0XHQuY2F0Y2goZXJyb3IgPT4ge1xyXG5cdFx0XHRpZiAoIShlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcikpXHJcblx0XHRcdFx0dGhyb3cgZXJyb3JcclxuXHRcdFx0bGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXHJcblx0XHRcdGltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHN2Zy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJykpXHJcblx0XHRcdHJlcGxhY2VBdHRyaWJ1dGVzKGltZywgc3ZnKVxyXG5cdFx0XHRzdmcucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoaW1nLCBzdmcpXHJcblx0XHR9KSlcclxuXHRcclxuXHRQcm9taXNlLmFsbChsb2FkU1ZHcykudGhlbih2YWwgPT4ge1xyXG5cdFx0Zm9yIChsZXQgc3ZnIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N2Zy5zdHJldGNoOm5vdChbcHJlc2VydmVBc3BlY3RSYXRpb10pJykpIHtcclxuXHRcdFx0aWYgKCFzdmcuaGFzQXR0cmlidXRlKCd2aWV3Qm94JykpIHtcclxuXHRcdFx0XHRsZXQgdyA9IHN2Zy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJylcclxuXHRcdFx0XHRsZXQgaCA9IHN2Zy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpXHJcblx0XHRcdFx0c3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsIGAwIDAgJHt3fSAke2h9YClcclxuXHRcdFx0fVxyXG5cdFx0XHRzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkIG1lZXQnKVxyXG5cdFx0fVxyXG5cdH0pXHJcbn0iXX0=
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
